A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\lab1.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE lab1.asm SET(SMALL) DEBUG PRINT(.\Listings\lab1.lst) OBJECT(.\Objects\l
                      ab1.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;=====================================================================
                       2     ;                                               DEKLARACJA SEGMENTÓW
                       3     
                       4     TEST_CODE       SEGMENT CODE                                            ; kod testów proced
                             ur   
                       5     TASK_CODE       SEGMENT CODE                                            ; kod realizujacy p
                             olecenia z listy zadan
                       6     UTIL_CODE       SEGMENT CODE                                            ; kod realizujace f
                             unkcje pomocnicze    
                       7             
                       8     FLAGS           SEGMENT BIT                                                     ; flagi bit
                             owe
                       9     
                      10     ;=====================================================================  
                      11     ;                                               STALE I ZMIENNE
                      12     
  0100                13     NUM_CONST_1     EQU                     256                                             ; L
                             iczba 1
  01C8                14     NUM_CONST_2 EQU                 456                                             ; Liczba 2
                      15             
  000A                16     VALUE           EQU                     10                                              ; W
                             artosc do zadania 8
  002D                17     LENGTH          EQU                     45                                              ; D
                             lugosc buforu do zadania 8   
                      18             
  0030                19     ADR_IRAM        EQU                     30h                                             ; A
                             dresy bloków liczb 2-bajtowych w IRAM
  8000                20     ADR_XRAM        EQU                     8000h                                   ; Adresy bl
                             oków liczb 2-bajtowych w XRAM
                      21             
  0FF0                22     MASK            EQU                     0000111111110000b               ; Maska 2-bajtowa  
                                  
                      23             
----                  24                             DSEG AT         ADR_IRAM 
0030                  25     num_iram_1:     DS                      2                                               ; L
                             iczba 2-bajtowa, zapisana w IRAM     
0032                  26     num_iram_2:     DS                      2                                               ; L
                             iczba 2-bajtowa, zapisana w IRAM
                      27             
----                  28                             XSEG AT         ADR_XRAM 
8000                  29     num_xram_1:     DS                      2                                               ; L
                             iczba 2-bajtowa, zapisana w XRAM     
                      30             
----                  31                             RSEG            FLAGS
0000                  32     overflow:       DBIT            1                                               ; Wskazuje 
                             czy wynik operacji jest przepelniony                                 
0001                  33     negative:       DBIT            1                                               ; Wskazuje 
                             czy wynik operacji jest negatywny
                      34     
                      35     ;=====================================================================
                      36     ;                                               KOD STARTOWY
                      37     
----                  38                             CSEG AT         0
                      39                             
0000 7830             40                             MOV                     R0, #num_iram_1                 ; Wczytanie
                              liczby 1 do IRAM
0002 7A00             41                             MOV                     R2, #LOW(NUM_CONST_1)
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     2

0004 7B01             42                             MOV                     R3, #HIGH(NUM_CONST_1)
0006 120000   F       43                             LCALL           define_iram_number
                      44                             
0009 7832             45                             MOV                     R0, #num_iram_2                 ; Wczytanie
                              liczby 2 do IRAM
000B 7AC8             46                             MOV                     R2, #LOW(NUM_CONST_2)
000D 7B01             47                             MOV                     R3, #HIGH(NUM_CONST_2)
000F 120000   F       48                             LCALL           define_iram_number
                      49                             
0012 908000           50                             MOV                     DPTR, #num_xram_1               ; Wczytanie
                              liczby 1 do XRAM
0015 7A00             51                             MOV                     R2, #LOW(NUM_CONST_1)
0017 7B01             52                             MOV                     R3, #HIGH(NUM_CONST_1)
0019 120000   F       53                             LCALL           define_xram_number
                      54     
001C 020000   F       55                             LJMP            loop                                    ; test wiel
                             okrotny
                      56     
                      57     ;=====================================================================
                      58     ;                                               TESTY POPRAWNOSCI
                      59                     
----                  60                             RSEG            TEST_CODE
                      61                                     
                      62     ;---------------------------------------------------------------------
                      63     ; Test procedury - wywolanie powtarzane
                      64     ;---------------------------------------------------------------------
                      65                     
0000 7830             66                             MOV                     R0, #num_iram_1                 ; Zadanie 1
0002 120000   F       67                             LCALL           task1
0005 8034             68                             SJMP            loop
                      69                             
0007 908000           70                             MOV                     DPTR, #num_xram_1               ; Zadanie 2
000A 120000   F       71                             LCALL           task2
000D 802C             72                             SJMP            loop                                    
                      73                             
000F 7830             74                             MOV                     R0, #num_iram_1                 ; Zadanie 3
0011 7932             75                             MOV                     R1, #num_iram_2
0013 120000   F       76                             LCALL           task3
0016 8023             77                             SJMP            loop                                    
                      78                             
0018 AE30             79                             MOV                     R6, num_iram_1                  ; Zadanie 4
001A AF31             80                             MOV                     R7, (num_iram_1+1)
001C 120000   F       81                             LCALL           task4
001F 8E30             82                             MOV                     num_iram_1, R6
0021 8F31             83                             MOV                     (num_iram_1+1), R7
0023 8016             84                             SJMP            loop    
                      85                                     
0025 AE30             86                             MOV                     R6, num_iram_1                  ; Zadanie 5
0027 AF31             87                             MOV                     R7, (num_iram_1+1)
0029 120000   F       88                             LCALL           task5
002C 8E30             89                             MOV                     num_iram_1, R6
002E 8F31             90                             MOV                     (num_iram_1+1), R7
0030 8009             91                             SJMP            loop    
                      92                     
0032 AE30             93                             MOV                     R6, num_iram_1                  ; Zadanie 6
0034 AF31             94                             MOV                     R7, (num_iram_1+1)
0036 120000   F       95                             LCALL           task6
0039 8000             96                             SJMP            loop    
003B                  97     loop:                           
003B 908002           98                             MOV                     DPTR, #(num_xram_1+2)   ; Zadanie 8
003E 7A2D             99                             MOV                     R2, #LENGTH
0040 120000   F      100                             LCALL           task8
0043 80F6            101                             SJMP            loop    
                     102     
                     103     ;=====================================================================          
                     104     ;                                               REALIZACJA ZADAN
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     3

                     105             
----                 106                             RSEG            TASK_CODE
                     107     
                     108     ;---------------------------------------------------------------------
                     109     ; ZADANIE 1
                     110     ; Inkrementuje liczbe dwubajtowa zapisana w pamieci IRAM.
                     111     ; Wejscie:      R0 - adres mlodszego bajtu liczby
                     112     ; Wyjscie:      Zinkrementowana liczba zapisana na 2 bajtach pamieci IRAM.
                     113     ; Uzywane:      R0
                     114     ;---------------------------------------------------------------------
0000                 115     task1:  
0000 06              116                             INC                     @R0                                        
                                          ; Inkrementacja mlodszego
0001 B60007          117                             CJNE            @R0, #0, end_taks1
0004 08              118                             INC                     R0
                     119                             
0005 B6FF02          120                             CJNE            @R0, #0FFh, not_overflow        ; Sprawdzenie warun
                             ku aktywacji flagi
0008 D200     F      121                             SETB            overflow
000A                 122     not_overflow:
000A 06              123                             INC                     @R0                                        
                                          ; Inkrementacja starszego
000B                 124     end_taks1:  
000B 7800            125                             MOV                     R0, #0                                     
                                  ; Koniec procdury
000D 22              126                             RET                                                             
                     127     
                     128     
                     129     ;---------------------------------------------------------------------
                     130     ; ZADANIE 2
                     131     ; Dekrementuje liczbe dwubajtowa zapisana w pamieci XRAM.
                     132     ; Wejscie:      DPTR - adres mlodszego bajtu liczby
                     133     ; Wyjscie:      Zdekrementowania liczba zapisana na 2 bajtach pamieci IRAM
                     134     ;                       od komórki o adresie NUM2_ADR.
                     135     ; Uzywane:      DPTR, A
                     136     ;---------------------------------------------------------------------
000E                 137     task2:
000E E0              138                             MOVX            A, @DPTR                                        ; D
                             ekrementacja mlodszego
000F 14              139                             DEC                     A
0010 F0              140                             MOVX            @DPTR, A
0011 B4FF09          141                             CJNE            A, #0FFh, end_task2
0014 A3              142                             INC                     DPTR
0015 E0              143                             MOVX            A, @DPTR
                     144                             
0016 B40002          145                             CJNE            A, #0, not_negative                     ; Sprawdzen
                             ie warunku aktywacji flagi
0019 D200     F      146                             SETB            negative
001B                 147     not_negative:   
001B 14              148                             DEC                     A                                          
                                          ; Dekrementacja starszego
001C F0              149                             MOVX            @DPTR, A
001D                 150     end_task2:                      
001D 22              151                             RET
                     152                             
                     153     
                     154     ;---------------------------------------------------------------------
                     155     ; ZADANIE 3
                     156     ; Dodanie liczb dwubajtowych w pamieci wewnetrznej (IRAM)
                     157     ; Wejscie:      R0 - adres mlodszego bajtu (Lo) skladnika A oraz sumy (A <- A + B)
                     158     ;                       R1 - adres mlodszego bajtu (Lo) skladnika B
                     159     ; Wyjscie:      Suma liczb A i B zapisana w miejscu skladnika A
                     160     ; Uzywane:      R0, R1, A
                     161     ;---------------------------------------------------------------------
001E                 162     task3:
001E E6              163                             MOV                     A, @R0                                     
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     4

                                  ; Dodawanie mlodszych bitow
001F 27              164                             ADD                     A, @R1
0020 F6              165                             MOV                     @R0, A
                     166                             
0021 08              167                             INC                     R0                                         
                                          ; Dodawanie starszych bitow
0022 09              168                             INC                     R1
0023 E6              169                             MOV                     A, @R0
0024 37              170                             ADDC            A, @R1
0025 F6              171                             MOV                     @R0, A
                     172                             
0026 5002            173                             JNC                     end_task3                                  
                                  ; Ustalenie flagi przepelnienia
0028 D200     F      174                             SETB            overflow
002A                 175     end_task3:
002A 22              176                             RET                                                                
                                          ; Powrot
                     177                             
                     178     
                     179     ;---------------------------------------------------------------------
                     180     ; ZADANIE 4
                     181     ; Wyzerowanie bitow 15 - 12 i 3 - 0 w liczbie dwubajtowej
                     182     ; Wejscie:      R7|R6 - liczba dwubajtowa
                     183     ; Wyjscie:      R7|R6 - liczba po modyfikacji
                     184     ; Uzywane:      R7, R6, A
                     185     ;---------------------------------------------------------------------
002B                 186     task4:
002B EE              187                             MOV             A, R6                                           ; M
                             odyfikacja mlodszego bajtu
002C 540F            188                             ANL                     A, #NOT(LOW(MASK))
002E FE              189                             MOV                     R6, A
                     190                             
002F EF              191                             MOV                     A, R7                                      
                                  ; Modufikacja starszego bajtu
0030 54F0            192                             ANL                     A, #NOT(HIGH(MASK))
0032 FF              193                             MOV                     R7, A
                     194                             
0033 22              195                             RET                                                                
                                          ; Powrot
                     196                             
                     197     ;---------------------------------------------------------------------
                     198     ; ZADANIE 5
                     199     ; Rotacja w prawo liczby dwubajtowej (cykliczna) 
                     200     ; Wejscie:      R7|R6 - liczba dwubajtowa
                     201     ; Wyjscie:      R7|R6 - liczba po modyfikacji
                     202     ; Uzywane:      R7, R6, A, CY
                     203     ;---------------------------------------------------------------------                  
0034                 204     task5:
0034 EE              205                             MOV                     A, R6                                      
                                  ; Przesuniecie mlodszego bajtu
0035 C3              206                             CLR                     C
0036 13              207                             RRC                     A
0037 FE              208                             MOV                     R6, A
                     209                             
0038 EF              210                             MOV                     A,R7                                       
                                  ; Przesuniecie starszego bajtu i dodanie do niego bitu 0 przeusnietego z mlodszego bajtu(i ile byl rowny 1)
0039 4004            211                             JC                      add_0_bit
003B C3              212                             CLR                     C
003C 13              213                             RRC                     A
003D 8004            214                             SJMP            next_condition
003F                 215     add_0_bit:              
003F C3              216                             CLR                     C
0040 13              217                             RRC                     A
0041 D2E7            218                             SETB            ACC.7 
0043                 219     next_condition:
0043 FF              220                             MOV                     R7, A                                      
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     5

                                  ; Sprawdzenie czy trzeba przesunac bit 0 ze starszego bajtu na bit 7 mlodszego bajtu
0044 5004            221                             JNC                     end_task5
0046 EE              222                             MOV                     A, R6
0047 D2E7            223                             SETB            ACC.7
0049 FE              224                             MOV                     R6, A
004A                 225     end_task5:
004A 22              226                             RET
                     227                             
                     228     ;---------------------------------------------------------------------
                     229     ; ZADANIE 6
                     230     ; Okreslenie bitu parzystosci dla liczby dwubajtowej
                     231     ; Wejscie:      R7|R6 - liczba dwubajtowa
                     232     ; Wyjscie:      CY - bit parzystosci
                     233     ; Uzywane:      R7, R6, CY
                     234     ;---------------------------------------------------------------------                     
                                  
004B                 235     task6:
004B C3              236                     CLR                             C                                          
                                          ; Czyscimy flage CY
                     237                     
004C EE              238                     MOV                             A, R6                                      
                                  ; Sprawdzamy parzystystosc mlodszego bajtu i ja zapamietujemy
004D 20D006          239                     JB                              P, first_odd
                     240                     
0050 EF              241                     MOV                             A, R7                                      
                                  ; Sprawdzamy parzystosc starszego bajtu dla parzystego mlodszego
0051 30D006          242                     JNB                             P, whole_even
0054 8005            243                     SJMP                    whole_odd
0056                 244     first_odd:      
0056 EF              245                     MOV                             A, R7                                      
                                  ; Sprawdzamy parzystosc starszego bajtu dla nieparzystego mlodszego
0057 30D001          246                     JNB                             P, whole_odd
005A                 247     whole_even:
005A 22              248                     RET     
005B                 249     whole_odd:      
005B D3              250                     SETB                    C       
005C 22              251                     RET
                     252                     
                     253     ;---------------------------------------------------------------------
                     254     ; ZADANIE 8
                     255     ; Wypelnianie obszaru pamieci zewnetrznej (XRAM) wartoscia 10
                     256     ; Wejscie:      DPTR - adres poczatku obszaru
                     257     ;                       R2 - dlugosc obszaru
                     258     ; Uzywane:      DPTR, R2, A
                     259     ;---------------------------------------------------------------------                  
005D                 260     task8:
005D 740A            261                             MOV                     A, #VALUE
005F BA0002          262                             CJNE            R2, #0, begin_loop                      ; Sprawdzam
                             y czy nie podano blednej dlugosci bufora
0062 8004            263                             SJMP            end_task8
0064                 264     begin_loop:     
0064 F0              265                             MOVX            @DPTR, A                                        ; W
                             ypelniamy bufor w XRAM
0065 A3              266                             INC                     DPTR
0066 DAFC            267                             DJNZ            R2, begin_loop
0068                 268     end_task8:
0068 22              269                             RET
                     270     
                     271     ;=====================================================================  
                     272     ;                                               PROCEDURY POMOCNICZE
                     273     
----                 274                             RSEG            UTIL_CODE
                     275     
                     276     ;---------------------------------------------------------------------
                     277     ; Wczytuje do pamieci IRAM liczbe 2-bajtowa.
                     278     ; Wejscie:      R0 - adres pierwszego bajtu liczby
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     6

                     279     ;                       R2 - mlodszy bajt liczby
                     280     ;                       R3 - starszy bajt liczby
                     281     ; Wyjscie:  Liczba zapisana na 2 bajtach pamieci IRAM, gdzie mlodszy
                     282     ;                       bajt znajduje sie pod @R0 a starszy w kolejnej komórce
                     283     ; Uzywane:      R0, R2, R3, A
                     284     ;---------------------------------------------------------------------
0000                 285     define_iram_number:
0000 EA              286                             MOV                     A, R2                                      
                                  ; Wczytanie liczby
0001 F6              287                             MOV                     @R0, A
0002 08              288                             INC                     R0
0003 EB              289                             MOV                     A, R3
0004 F6              290                             MOV                     @R0, A                                     
                                          
                     291                             
0005 22              292                             RET                                                                
                                          ; Powrót
                     293                     
                     294                     
                     295     ;---------------------------------------------------------------------
                     296     ; Wczytuje do pamieci XRAM liczbe 2-bajtowa.
                     297     ; Wejscie:      DPTR - adres mlodszego bajtu liczby
                     298     ;                       R2 - mlodszy bajt liczby
                     299     ;                       R3 - starszy bajt liczby
                     300     ; Wyjscie:  Liczba zapisana na 2 bajtach pamieci XRAM, gdzie mlodszy
                     301     ;                       bajt znajduje sie pod @DPTR a starszy w kolejnej komórce
                     302     ; Uzywane:      DPTR, R2, R3, A
                     303     ;---------------------------------------------------------------------
0006                 304     define_xram_number:
0006 EA              305                             MOV                     A, R2
0007 F0              306                             MOVX            @DPTR, A
0008 EB              307                             MOV                     A, R3
0009 A3              308                             INC                     DPTR
000A F0              309                             MOVX            @DPTR, A
                     310                             
000B 22              311                             RET                                                                
                                  ; Powrot
                     312     
                     313     ;=====================================================================
                     314     
                     315     END
A51 MACRO ASSEMBLER  LAB1                                                                 03/07/2023 02:24:13 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
ADD_0_BIT. . . . .  C ADDR   003FH   R   SEG=TASK_CODE
ADR_IRAM . . . . .  N NUMB   0030H   A   
ADR_XRAM . . . . .  N NUMB   8000H   A   
BEGIN_LOOP . . . .  C ADDR   0064H   R   SEG=TASK_CODE
DEFINE_IRAM_NUMBER  C ADDR   0000H   R   SEG=UTIL_CODE
DEFINE_XRAM_NUMBER  C ADDR   0006H   R   SEG=UTIL_CODE
END_TAKS1. . . . .  C ADDR   000BH   R   SEG=TASK_CODE
END_TASK2. . . . .  C ADDR   001DH   R   SEG=TASK_CODE
END_TASK3. . . . .  C ADDR   002AH   R   SEG=TASK_CODE
END_TASK5. . . . .  C ADDR   004AH   R   SEG=TASK_CODE
END_TASK8. . . . .  C ADDR   0068H   R   SEG=TASK_CODE
FIRST_ODD. . . . .  C ADDR   0056H   R   SEG=TASK_CODE
FLAGS. . . . . . .  B SEG    0002H       REL=UNIT
LENGTH . . . . . .  N NUMB   002DH   A   
LOOP . . . . . . .  C ADDR   003BH   R   SEG=TEST_CODE
MASK . . . . . . .  N NUMB   0FF0H   A   
NEGATIVE . . . . .  B ADDR   0000H.1 R   SEG=FLAGS
NEXT_CONDITION . .  C ADDR   0043H   R   SEG=TASK_CODE
NOT_NEGATIVE . . .  C ADDR   001BH   R   SEG=TASK_CODE
NOT_OVERFLOW . . .  C ADDR   000AH   R   SEG=TASK_CODE
NUM_CONST_1. . . .  N NUMB   0100H   A   
NUM_CONST_2. . . .  N NUMB   01C8H   A   
NUM_IRAM_1 . . . .  D ADDR   0030H   A   
NUM_IRAM_2 . . . .  D ADDR   0032H   A   
NUM_XRAM_1 . . . .  X ADDR   8000H   A   
OVERFLOW . . . . .  B ADDR   0000H.0 R   SEG=FLAGS
P. . . . . . . . .  B ADDR   00D0H.0 A   
TASK1. . . . . . .  C ADDR   0000H   R   SEG=TASK_CODE
TASK2. . . . . . .  C ADDR   000EH   R   SEG=TASK_CODE
TASK3. . . . . . .  C ADDR   001EH   R   SEG=TASK_CODE
TASK4. . . . . . .  C ADDR   002BH   R   SEG=TASK_CODE
TASK5. . . . . . .  C ADDR   0034H   R   SEG=TASK_CODE
TASK6. . . . . . .  C ADDR   004BH   R   SEG=TASK_CODE
TASK8. . . . . . .  C ADDR   005DH   R   SEG=TASK_CODE
TASK_CODE. . . . .  C SEG    0069H       REL=UNIT
TEST_CODE. . . . .  C SEG    0045H       REL=UNIT
UTIL_CODE. . . . .  C SEG    000CH       REL=UNIT
VALUE. . . . . . .  N NUMB   000AH   A   
WHOLE_EVEN . . . .  C ADDR   005AH   R   SEG=TASK_CODE
WHOLE_ODD. . . . .  C ADDR   005BH   R   SEG=TASK_CODE


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
