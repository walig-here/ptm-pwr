A51 MACRO ASSEMBLER  LAB2                                                                 03/19/2023 19:59:45 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\lab2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE lab2.asm SET(SMALL) DEBUG PRINT(.\Listings\lab2.lst) OBJECT(.\Objects\l
                      ab2.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;------------------------------------------------------------------
                       2     ;                                               BLOK SEGMENTÓW
                       3     
                       4     PROCEDURES      SEGMENT CODE
                       5     UTIL_PROC       SEGMENT CODE
                       6     STACK           SEGMENT DATA
                       7             
----                   8                             RSEG STACK
0000                   9     stack_low:      DS                              8
                      10     
                      11     ;------------------------------------------------------------------
                      12     ;                                               BLOK STALYCH
                      13     
  0002                14     BLOCK_LEN       EQU                             2                                          
                                  ; dlugosc bufora w pamieci XRAM/IRAM
  0000                15     XBLOCK_ADR      EQU                             0h                                         
                                  ; adres poczatku bufora w pamieci XRAM
  0030                16     IBLOCK_ADR      EQU                             30h                                        
                                  ; adres poczatku bufora w pamieci IRAM
                      17     
                      18     ;------------------------------------------------------------------
                      19     ;                                               BLOK STARTOWY
                      20                             
----                  21                             CSEG AT                 0
0000 758100   F       22                             MOV                             SP, #stack_low
0003 8022             23                             SJMP                    loop    
                      24             
0005 900000           25                             MOV                             DPTR, #XBLOCK_ADR
0008 7A02             26                             MOV                             R2, #BLOCK_LEN
000A 120000   F       27                             LCALL                   sum_xram
000D 8018             28                             SJMP                    loop
                      29             
000F 900000           30                             MOV                             DPTR, #XBLOCK_ADR
0012 7A02             31                             MOV                             R2, #BLOCK_LEN
0014 7830             32                             MOV                             R0, #IBLOCK_ADR
0016 120000   F       33                             LCALL                   copy_xram_iram_inv
0019 800C             34                             SJMP                    loop
                      35                             
001B 900000           36                             MOV                             DPTR, #XBLOCK_ADR
001E 7A02             37                             MOV                             R2, #BLOCK_LEN
0020 7830             38                             MOV                             R0, #IBLOCK_ADR
0022 120000   F       39                             LCALL                   copy_iram_xram_z
0025 8000             40                             SJMP                    loop    
0027                  41     loop:
0027 900000           42                             MOV                             DPTR, #XBLOCK_ADR
002A 7A02             43                             MOV                             R2, #BLOCK_LEN
002C 7810             44                             MOV                             R0, #LOW(XBLOCK_ADR+16)
002E 7900             45                             MOV                             R1, #HIGH(XBLOCK_ADR+16)
0030 120000   F       46                             LCALL                   copy_xram_xram_2
0033 80F2             47                             SJMP                    loop
                      48     
                      49     ;------------------------------------------------------------------
                      50     ;                                               BLOK PROCEDUR
                      51                             
----                  52                             RSEG                    PROCEDURES
                      53     
                      54     ;---------------------------------------------------------------------
A51 MACRO ASSEMBLER  LAB2                                                                 03/19/2023 19:59:45 PAGE     2

                      55     ; Sumowanie bloku danych w pamieci zewnetrznej (XRAM)
                      56     ;
                      57     ; Wejscie: DPTR  - adres poczatkowy bloku danych
                      58     ;          R2    - dlugosc bloku danych
                      59     ; Wyjscie: R7|R6 - 16-bit suma elementow bloku (Hi|Lo)
                      60     ;---------------------------------------------------------------------
0000                  61     sum_xram:
0000 7E00             62                             MOV                             R6, #0                             
                                  ; czyszczenie rejestrów wynikowych
0002 7F00             63                             MOV                             R7, #0
                      64                             
0004 EA               65                             MOV                             A, R2                              
                                  ; sprawdzenie czy wskazany blok nie jest zerowej dlugosci
0005 600B             66                             JZ                              reached_sum_buffers_end
                      67                             
0007                  68     add_next:
0007 C3               69                             CLR                             C                                  
                                          ; dodanie do mlodszego bajtu zawartosci z bloku danych
0008 E0               70                             MOVX                    A, @DPTR
0009 2E               71                             ADD                             A, R6                           
000A FE               72                             MOV                             R6, A
                      73                             
000B EF               74                             MOV                             A, R7                              
                                  ; dodanie ewentualnego przeniesienia do starszego bajtu
000C 3400             75                             ADDC                    A, #0
000E FF               76                             MOV                             R7, A
                      77                             
000F A3               78                             INC                             DPTR                               
                                  ; przejscie do kolejnej komórki pamieci (o ile nie dotarlismy do konca bufora)
0010 DAF5             79                             DJNZ                    R2, add_next
                      80                             
0012                  81     reached_sum_buffers_end:
0012 22               82                             RET                                                                
                                          ; dotarto do konca bufora
                      83                     
                      84                     
                      85     ;---------------------------------------------------------------------
                      86     ; Kopiowanie bloku z pamieci zewnetrznej (XRAM) do wewnetrznej (IRAM)
                      87     ; Przy kopiowaniu powinna byc odwrocona kolejnosc elementow
                      88     ;
                      89     ; Wejscie: DPTR - adres poczatkowy obszaru zrodlowego
                      90     ;          R0   - adres poczatkowy obszaru docelowego
                      91     ;          R2   - dlugosc kopiowanego obszaru
                      92     ;---------------------------------------------------------------------
0013                  93     copy_xram_iram_inv:             
0013 EA               94                             MOV                             A, R2                              
                                  ; sprzawdzenie, czy wskazany blok nie jest zerowej dlugosci
0014 6009             95                             JZ                              reached_cpy_xram_buffers_end
                      96                             
0016 28               97                             ADD                             A, R0                              
                                  ; przesuniecie wskaznika IRAM na koniec obszaru docelowego
0017 14               98                             DEC                             A
0018 F8               99                             MOV                             R0, A
                     100                             
0019                 101     copy_next_xram:
0019 E0              102                             MOVX                    A, @DPTR                                ; k
                             opiowanie danych z XRAM do IRAM
001A F6              103                             MOV                             @R0, A
                     104                             
001B 18              105                             DEC                             R0                                 
                                          ; przesuniecie wskaznikow 
001C A3              106                             INC                             DPTR
001D DAFA            107                             DJNZ                    R2, copy_next_xram
                     108     
001F                 109     reached_cpy_xram_buffers_end:
001F 22              110                             RET
A51 MACRO ASSEMBLER  LAB2                                                                 03/19/2023 19:59:45 PAGE     3

                     111     
                     112     
                     113     ;---------------------------------------------------------------------
                     114     ; Kopiowanie bloku z pamieci wewnetrznej (IRAM) do zewnetrznej (XRAM)
                     115     ; Przy kopiowaniu powinny byc pominiete elementy zerowe
                     116     ;
                     117     ; Wejscie: R0   - adres poczatkowy obszaru zrodlowego
                     118     ;          DPTR - adres poczatkowy obszaru docelowego
                     119     ;          R2   - dlugosc kopiowanego obszaru
                     120     ;---------------------------------------------------------------------
0020                 121     copy_iram_xram_z:
0020 EA              122                             MOV                             A, R2                              
                                  ; sprzawdzenie, czy wskazany blok nie jest zerowej dlugosci
0021 6009            123                             JZ                              reached_cpy_iram_buffers_end
                     124     
0023                 125     copy_next_iram:
0023 E6              126                             MOV                             A, @R0                             
                                  ; sprawdzenie, czy wartosc komorki jest niezerowa
0024 6003            127                             JZ                              iram_value_is_zero
                     128                             
0026 E6              129                             MOV                             A, @R0                             
                                  ; wykonanie kopii do XRAM i przesuniecie wskaznika w XRAM
0027 F0              130                             MOVX                    @DPTR, A
0028 A3              131                             INC                             DPTR
                     132                             
0029                 133     iram_value_is_zero:
0029 08              134                             INC                             R0                                 
                                          ; przesuniecie wskaznika w IRAM, przejscie do kopiowania kolejnej komorki
002A DAF7            135                             DJNZ                    R2, copy_next_iram
                     136     
002C                 137     reached_cpy_iram_buffers_end:
002C 22              138                             RET
                     139                             
                     140     ;---------------------------------------------------------------------
                     141     ; Kopiowanie bloku danych w pamieci zewnetrznej (XRAM -> XRAM)
                     142     ; Przy kopiowaniu elementy niezerowe powinny byc podwojone
                     143     ;
                     144     ; Wejscie: DPTR  - adres poczatkowy obszaru zrodlowego
                     145     ;          R1|R0 - adres poczatkowy obszaru docelowego
                     146     ;          R2    - dlugosc kopiowanego obszaru
                     147     ;---------------------------------------------------------------------
002D                 148     copy_xram_xram_2:
002D EA              149                             MOV                             A, R2                              
                                  ; sprawdzenie, czy wskazany blok nie jest zerowej dlugosci
002E 6012            150                             JZ                              reached_xram_end_2
                     151                             
0030                 152     copy_next_xram_to_xram:
0030 E0              153                             MOVX                    A, @DPTR                                ; k
                             opiuje dane do miejca docelowego
0031 89A0            154                             MOV                             P2, R1
0033 F2              155                             MOVX                    @R0, A
                     156                             
0034 120000   F      157                             LCALL                   increment_r1r0_pointer  ; zwiekszam adres m
                             iejsca docelowego, zachowujac jednoczesnie adres miejsca zrodlowego
                     158                             
0037 6003            159                             JZ                              check_cpy_next                  ; j
                             ezeli element jest niezerowy do kopiuje go drugi raz
0039 89A0            160                             MOV                             P2, R1
003B F2              161                             MOVX                    @R0, A
                     162                             
003C                 163     check_cpy_next:
003C A3              164                             INC                             DPTR
003D 120000   F      165                             LCALL                   increment_r1r0_pointer
0040 DAEE            166                             DJNZ                    R2, copy_next_xram_to_xram
0042                 167     reached_xram_end_2:
0042 22              168                             RET
A51 MACRO ASSEMBLER  LAB2                                                                 03/19/2023 19:59:45 PAGE     4

                     169     
                     170     ;------------------------------------------------------------------
                     171     ;                                               BLOK PROCEDUR
                     172                             
----                 173                             RSEG                    UTIL_PROC
                     174     
                     175     ;------------------------------------------------------------------
                     176     ; Inkrementuje 16-bitowy wskaznik R1|R0
                     177     ;------------------------------------------------------------------
0000                 178     increment_r1r0_pointer:
0000 C083            179                     PUSH                    DPH                                             
0002 C082            180                     PUSH                    DPL
0004 8983            181                     MOV                             DPH, R1
0006 8882            182                     MOV                             DPL, R0
0008 A3              183                     INC                             DPTR
0009 A983            184                     MOV                             R1, DPH
000B A882            185                     MOV                             R0, DPL
000D D082            186                     POP                             DPL
000F D083            187                     POP                             DPH
0011 22              188                     RET
                     189     
                     190     ;------------------------------------------------------------------
                     191     ;                                               BLOK ZMIENNYCH
                     192     
                     193     ;------------------------------------------------------------------
                     194                             END
A51 MACRO ASSEMBLER  LAB2                                                                 03/19/2023 19:59:45 PAGE     5

SYMBOL TABLE LISTING
------ ----- -------


N A M E                       T Y P E  V A L U E   ATTRIBUTES

ADD_NEXT . . . . . . . . . .  C ADDR   0007H   R   SEG=PROCEDURES
BLOCK_LEN. . . . . . . . . .  N NUMB   0002H   A   
CHECK_CPY_NEXT . . . . . . .  C ADDR   003CH   R   SEG=PROCEDURES
COPY_IRAM_XRAM_Z . . . . . .  C ADDR   0020H   R   SEG=PROCEDURES
COPY_NEXT_IRAM . . . . . . .  C ADDR   0023H   R   SEG=PROCEDURES
COPY_NEXT_XRAM . . . . . . .  C ADDR   0019H   R   SEG=PROCEDURES
COPY_NEXT_XRAM_TO_XRAM . . .  C ADDR   0030H   R   SEG=PROCEDURES
COPY_XRAM_IRAM_INV . . . . .  C ADDR   0013H   R   SEG=PROCEDURES
COPY_XRAM_XRAM_2 . . . . . .  C ADDR   002DH   R   SEG=PROCEDURES
DPH. . . . . . . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . . . . . . .  D ADDR   0082H   A   
IBLOCK_ADR . . . . . . . . .  N NUMB   0030H   A   
INCREMENT_R1R0_POINTER . . .  C ADDR   0000H   R   SEG=UTIL_PROC
IRAM_VALUE_IS_ZERO . . . . .  C ADDR   0029H   R   SEG=PROCEDURES
LOOP . . . . . . . . . . . .  C ADDR   0027H   A   
P2 . . . . . . . . . . . . .  D ADDR   00A0H   A   
PROCEDURES . . . . . . . . .  C SEG    0043H       REL=UNIT
REACHED_CPY_IRAM_BUFFERS_END  C ADDR   002CH   R   SEG=PROCEDURES
REACHED_CPY_XRAM_BUFFERS_END  C ADDR   001FH   R   SEG=PROCEDURES
REACHED_SUM_BUFFERS_END. . .  C ADDR   0012H   R   SEG=PROCEDURES
REACHED_XRAM_END_2 . . . . .  C ADDR   0042H   R   SEG=PROCEDURES
SP . . . . . . . . . . . . .  D ADDR   0081H   A   
STACK. . . . . . . . . . . .  D SEG    0008H       REL=UNIT
STACK_LOW. . . . . . . . . .  D ADDR   0000H   R   SEG=STACK
SUM_XRAM . . . . . . . . . .  C ADDR   0000H   R   SEG=PROCEDURES
UTIL_PROC. . . . . . . . . .  C SEG    0012H       REL=UNIT
XBLOCK_ADR . . . . . . . . .  N NUMB   0000H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
