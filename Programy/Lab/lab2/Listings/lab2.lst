A51 MACRO ASSEMBLER  LAB2                                                                 04/01/2023 02:29:58 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\lab2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE lab2.asm SET(SMALL) DEBUG PRINT(.\Listings\lab2.lst) OBJECT(.\Objects\l
                      ab2.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;------------------------------------------------------------------
                       2     ;                                               BLOK SEGMENTÓW
                       3     
                       4     PROCEDURES      SEGMENT CODE
                       5     UTIL_PROC       SEGMENT CODE
                       6     STACK           SEGMENT DATA
                       7             
----                   8                             RSEG STACK
0000                   9     stack_low:      DS                              8
                      10     
                      11     ;------------------------------------------------------------------
                      12     ;                                               BLOK STALYCH
                      13     
  0005                14     BLOCK_LEN       EQU                             5                                          
                                          ; dlugosc bufora w pamieci XRAM/IRAM
  0000                15     XBLOCK_ADR      EQU                             0h                                         
                                          ; adres poczatku bufora w pamieci XRAM
  0030                16     IBLOCK_ADR      EQU                             30h                                        
                                          ; adres poczatku bufora w pamieci IRAM
                      17     
                      18     ;------------------------------------------------------------------
                      19     ;                                               BLOK STARTOWY
                      20                             
----                  21                             CSEG AT                 0                                          
                                          
0000 758100   F       22                             MOV                             SP, #stack_low
0003 8022             23                             SJMP                    loop    
                      24     
0005 900000           25                             MOV                             DPTR, #XBLOCK_ADR                  
                                  ; Zadanie 1
0008 7A05             26                             MOV                             R2, #BLOCK_LEN
000A 120000   F       27                             LCALL                   sum_xram
000D 8018             28                             SJMP                    loop
                      29             
000F 900000           30                             MOV                             DPTR, #XBLOCK_ADR                  
                                  ; Zadanie 2
0012 7A05             31                             MOV                             R2, #BLOCK_LEN
0014 7830             32                             MOV                             R0, #IBLOCK_ADR
0016 120000   F       33                             LCALL                   copy_xram_iram_inv
0019 800C             34                             SJMP                    loop
                      35                                     
001B 900000           36                             MOV                             DPTR, #XBLOCK_ADR                  
                                  ; Zadanie 3
001E 7A05             37                             MOV                             R2, #BLOCK_LEN
0020 7830             38                             MOV                             R0, #IBLOCK_ADR
0022 120000   F       39                             LCALL                   copy_iram_xram_z
0025 8000             40                             SJMP                    loop    
0027                  41     loop:   
0027 900000           42                             MOV                             DPTR, #XBLOCK_ADR                  
                                  ; Zadanie 4
002A 7A05             43                             MOV                             R2, #BLOCK_LEN
002C 780A             44                             MOV                             R0, #LOW(000Ah)
002E 7900             45                             MOV                             R1, #HIGH(000Ah)
0030 120000   F       46                             LCALL                   copy_xram_xram_2
0033 80F2             47                             SJMP                    loop
                      48                             
0035 7A05             49                             MOV                             R2, #BLOCK_LEN                     
A51 MACRO ASSEMBLER  LAB2                                                                 04/01/2023 02:29:58 PAGE     2

                                  ; Zadanie 5
0037 7830             50                             MOV                             R0, #IBLOCK_ADR
0039 120000   F       51                             LCALL                   count_range
003C 80E9             52                             SJMP                    loop
                      53     
                      54     ;------------------------------------------------------------------
                      55     ;                                               BLOK PROCEDUR
                      56                             
----                  57                             RSEG                    PROCEDURES
                      58     
                      59     ;---------------------------------------------------------------------
                      60     ; Sumowanie bloku danych w pamieci zewnetrznej (XRAM)
                      61     ;
                      62     ; Wejscie: DPTR  - adres poczatkowy bloku danych
                      63     ;          R2    - dlugosc bloku danych
                      64     ; Wyjscie: R7|R6 - 16-bit suma elementow bloku (Hi|Lo)
                      65     ;---------------------------------------------------------------------
0000                  66     sum_xram:
0000 EA               67                             MOV     A, R2                                           ; sprawdzen
                             ie czy wskazany blok nie jest zerowej dlugosci
0001 600F             68                             JZ      reached_sum_buffers_end
                      69                             
0003 7E00             70                             MOV     R6, #0                                          ; czyszczen
                             ie rejestrów wynikowych
0005 7F00             71                             MOV     R7, #0
                      72                             
0007 C3               73     add_next:       CLR     C                                                       ; dodanie d
                             o mlodszego bajtu zawartosci z bloku danych
0008 E0               74                             MOVX A, @DPTR
0009 2E               75                             ADD     A, R6                           
000A FE               76                             MOV     R6, A
                      77                             
000B EF               78                             MOV     A, R7                                           ; dodanie e
                             wentualnego przeniesienia do starszego bajtu
000C 3400             79                             ADDC A, #0
000E FF               80                             MOV     R7, A
                      81                             
000F A3               82                             INC     DPTR                                            ; przejscie
                              do kolejnej komórki pamieci (o ile nie dotarlismy do konca bufora)
0010 DAF5             83                             DJNZ R2, add_next
                      84                             
0012                  85     reached_sum_buffers_end:
0012 22               86                             RET                                                             ; d
                             otarto do konca bufora
                      87                             
                      88                     
                      89     ;---------------------------------------------------------------------
                      90     ; Kopiowanie bloku z pamieci zewnetrznej (XRAM) do wewnetrznej (IRAM)
                      91     ; Przy kopiowaniu powinna byc odwrocona kolejnosc elementow
                      92     ;
                      93     ; Wejscie: DPTR - adres poczatkowy obszaru zrodlowego
                      94     ;          R0   - adres poczatkowy obszaru docelowego
                      95     ;          R2   - dlugosc kopiowanego obszaru
                      96     ;---------------------------------------------------------------------
0013                  97     copy_xram_iram_inv:             
0013 EA               98                             MOV                             A, R2                              
                                          ; sprzawdzenie, czy wskazany blok nie jest zerowej dlugosci
0014 6009             99                             JZ                              reached_cpy_xram_buffers_end
                     100                             
0016 28              101                             ADD                             A, R0                              
                                          ; przesuniecie wskaznika IRAM na koniec obszaru docelowego
0017 14              102                             DEC                             A
0018 F8              103                             MOV                             R0, A
                     104                             
0019                 105     copy_next_xram:
0019 E0              106                             MOVX                    A, @DPTR                                   
A51 MACRO ASSEMBLER  LAB2                                                                 04/01/2023 02:29:58 PAGE     3

                                  ; kopiowanie danych z XRAM do IRAM
001A F6              107                             MOV                             @R0, A
                     108                             
001B 18              109                             DEC                             R0                                 
                                                  ; przesuniecie wskaznikow 
001C A3              110                             INC                             DPTR
001D DAFA            111                             DJNZ                    R2, copy_next_xram
                     112     
001F                 113     reached_cpy_xram_buffers_end:
001F 22              114                             RET
                     115     
                     116     
                     117     ;---------------------------------------------------------------------
                     118     ; Kopiowanie bloku z pamieci wewnetrznej (IRAM) do zewnetrznej (XRAM)
                     119     ; Przy kopiowaniu powinny byc pominiete elementy zerowe
                     120     ;
                     121     ; Wejscie: R0   - adres poczatkowy obszaru zrodlowego
                     122     ;          DPTR - adres poczatkowy obszaru docelowego
                     123     ;          R2   - dlugosc kopiowanego obszaru
                     124     ;---------------------------------------------------------------------
0020                 125     copy_iram_xram_z:
0020 EA              126                             MOV                             A, R2                              
                                          ; sprzawdzenie, czy wskazany blok nie jest zerowej dlugosci
0021 6008            127                             JZ                              reached_cpy_iram_buffers_end
                     128     
0023                 129     copy_next_iram:
0023 E6              130                             MOV                             A, @R0                             
                                          ; sprawdzenie, czy wartosc komorki jest niezerowa
0024 6002            131                             JZ                              iram_value_is_zero
                     132                             
                     133                                                                                                
                                                  ; wykonanie kopii do XRAM i przesuniecie wskaznika w XRAM
0026 F0              134                             MOVX                    @DPTR, A
0027 A3              135                             INC                             DPTR
                     136                             
0028                 137     iram_value_is_zero:
0028 08              138                             INC                             R0                                 
                                                  ; przesuniecie wskaznika w IRAM, przejscie do kopiowania kolejnej komorki
0029 DAF8            139                             DJNZ                    R2, copy_next_iram
                     140     
002B                 141     reached_cpy_iram_buffers_end:
002B 22              142                             RET
                     143                             
                     144     ;---------------------------------------------------------------------
                     145     ; Kopiowanie bloku danych w pamieci zewnetrznej (XRAM -> XRAM)
                     146     ; Przy kopiowaniu elementy niezerowe powinny byc podwojone
                     147     ;
                     148     ; Wejscie: DPTR  - adres poczatkowy obszaru zrodlowego
                     149     ;          R1|R0 - adres poczatkowy obszaru docelowego
                     150     ;          R2    - dlugosc kopiowanego obszaru
                     151     ;---------------------------------------------------------------------
002C                 152     copy_xram_xram_2:
002C EA              153                             MOV                             A, R2                              
                                          ; sprawdzenie, czy wskazany blok nie jest zerowej dlugosci
002D 6010            154                             JZ                              reached_xram_end_2
                     155                             
002F 89A0            156                             MOV P2, R1
0031                 157     copy_next_xram_to_xram:
0031 E0              158                             MOVX                    A, @DPTR                                   
                                  ; kopiuje dane do miejca docelowego
0032 F2              159                             MOVX                    @R0, A
                     160                             
0033 120000   F      161                             LCALL                   increment_r1r0_pointer          ; zwiekszam
                              adres miejsca docelowego, zachowujac jednoczesnie adres miejsca zrodlowego
                     162                             
0036 6004            163                             JZ                              check_cpy_next                     
A51 MACRO ASSEMBLER  LAB2                                                                 04/01/2023 02:29:58 PAGE     4

                                  ; jezeli element jest niezerowy do kopiuje go drugi raz
0038 F2              164                             MOVX                    @R0, A
0039 120000   F      165                             LCALL                   increment_r1r0_pointer
                     166                             
003C                 167     check_cpy_next:
003C A3              168                             INC                             DPTR
003D DAF2            169                             DJNZ                    R2, copy_next_xram_to_xram
003F                 170     reached_xram_end_2:
003F 22              171                             RET
                     172     
                     173     ;---------------------------------------------------------------------
                     174     ; Zliczanie w bloku danych w pamieci wewnetrznej (IRAM)
                     175     ; liczb mieszczacych sie w przedziale domknietym <10,100>
                     176     ;
                     177     ; Wejscie: R0 - adres poczatkowy bloku danych
                     178     ;          R2 - dlugosc bloku danych
                     179     ; Wyjscie: A  - liczba elementow spelniajacych warunek
                     180     ;---------------------------------------------------------------------
0040                 181     count_range:
0040 EA              182                             MOV                             A, R2                              
                                                  ; sprawdzenie, czy wskazany blok nie jest zerowej dlugosci
0041 600F            183                             JZ                              reached_count_end
0043 E4              184                             CLR                             A                                  
                                                  ; wyzerowanie licznika
                     185                             
0044                 186     analyze_next:
                     187                             
0044 B60A00          188                             CJNE                    @R0, #10, compared_to_10                   
                                          ; sprawdzenie, czy @R0<10
0047                 189     compared_to_10:
0047 4006            190                             JC                              check_loop_condition               
                                  
                     191                                                                                     
0049 B66500          192                             CJNE                    @R0, #101, compared_to_100                 
                                          ; sprawdzenie, czy @R0>100
004C                 193     compared_to_100:
004C 5001            194                             JNC                             check_loop_condition
                     195                             
004E 04              196                             INC                             A                                  
                                                                          ; zliczenie komórki
004F                 197     check_loop_condition:
004F 08              198                             INC                             R0
0050 DAF2            199                             DJNZ                    R2, analyze_next
                     200                             
0052                 201     reached_count_end:
0052 22              202                             RET
                     203     
                     204     ;------------------------------------------------------------------
                     205     ;                                               BLOK PROCEDUR POMOCNICZYCH
                     206                             
----                 207                             RSEG                    UTIL_PROC
                     208     
                     209     ;------------------------------------------------------------------
                     210     ; Inkrementuje 16-bitowy wskaznik R1|R0
                     211     ;------------------------------------------------------------------
0000                 212     increment_r1r0_pointer:
0000 08              213                             INC R0
0001 B80002          214                             CJNE R0, #0, end_increment
0004 05A0            215                             INC P2
                     216     
0006                 217     end_increment:
0006 22              218                             RET
                     219                     
                     220     ;------------------------------------------------------------------
                     221                             END
A51 MACRO ASSEMBLER  LAB2                                                                 04/01/2023 02:29:58 PAGE     5

SYMBOL TABLE LISTING
------ ----- -------


N A M E                       T Y P E  V A L U E   ATTRIBUTES

ADD_NEXT . . . . . . . . . .  C ADDR   0007H   R   SEG=PROCEDURES
ANALYZE_NEXT . . . . . . . .  C ADDR   0044H   R   SEG=PROCEDURES
BLOCK_LEN. . . . . . . . . .  N NUMB   0005H   A   
CHECK_CPY_NEXT . . . . . . .  C ADDR   003CH   R   SEG=PROCEDURES
CHECK_LOOP_CONDITION . . . .  C ADDR   004FH   R   SEG=PROCEDURES
COMPARED_TO_10 . . . . . . .  C ADDR   0047H   R   SEG=PROCEDURES
COMPARED_TO_100. . . . . . .  C ADDR   004CH   R   SEG=PROCEDURES
COPY_IRAM_XRAM_Z . . . . . .  C ADDR   0020H   R   SEG=PROCEDURES
COPY_NEXT_IRAM . . . . . . .  C ADDR   0023H   R   SEG=PROCEDURES
COPY_NEXT_XRAM . . . . . . .  C ADDR   0019H   R   SEG=PROCEDURES
COPY_NEXT_XRAM_TO_XRAM . . .  C ADDR   0031H   R   SEG=PROCEDURES
COPY_XRAM_IRAM_INV . . . . .  C ADDR   0013H   R   SEG=PROCEDURES
COPY_XRAM_XRAM_2 . . . . . .  C ADDR   002CH   R   SEG=PROCEDURES
COUNT_RANGE. . . . . . . . .  C ADDR   0040H   R   SEG=PROCEDURES
END_INCREMENT. . . . . . . .  C ADDR   0006H   R   SEG=UTIL_PROC
IBLOCK_ADR . . . . . . . . .  N NUMB   0030H   A   
INCREMENT_R1R0_POINTER . . .  C ADDR   0000H   R   SEG=UTIL_PROC
IRAM_VALUE_IS_ZERO . . . . .  C ADDR   0028H   R   SEG=PROCEDURES
LOOP . . . . . . . . . . . .  C ADDR   0027H   A   
P2 . . . . . . . . . . . . .  D ADDR   00A0H   A   
PROCEDURES . . . . . . . . .  C SEG    0053H       REL=UNIT
REACHED_COUNT_END. . . . . .  C ADDR   0052H   R   SEG=PROCEDURES
REACHED_CPY_IRAM_BUFFERS_END  C ADDR   002BH   R   SEG=PROCEDURES
REACHED_CPY_XRAM_BUFFERS_END  C ADDR   001FH   R   SEG=PROCEDURES
REACHED_SUM_BUFFERS_END. . .  C ADDR   0012H   R   SEG=PROCEDURES
REACHED_XRAM_END_2 . . . . .  C ADDR   003FH   R   SEG=PROCEDURES
SP . . . . . . . . . . . . .  D ADDR   0081H   A   
STACK. . . . . . . . . . . .  D SEG    0008H       REL=UNIT
STACK_LOW. . . . . . . . . .  D ADDR   0000H   R   SEG=STACK
SUM_XRAM . . . . . . . . . .  C ADDR   0000H   R   SEG=PROCEDURES
UTIL_PROC. . . . . . . . . .  C SEG    0007H       REL=UNIT
XBLOCK_ADR . . . . . . . . .  N NUMB   0000H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
